import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Dataset and model path
model_save_path = 'output/mymodel.h5'

tesdata = [
    [0.0,0.0,-0.27586206896551724,-0.07692307692307693,-0.5729442970822282,-0.23076923076923078,-0.8638373121131742,-0.35013262599469497,-1.0,-0.5128205128205128,-0.1847922192749779,-0.7648099027409372,-0.6083112290008842,-0.9672855879752431,-0.8461538461538461,-0.8461538461538461,-0.9752431476569408,-0.6967285587975243,-0.13527851458885942,-0.7904509283819628,-0.579133510167993,-0.9761273209549072,-0.8187444739168878,-0.8390804597701149,-0.9398762157382847,-0.6578249336870027,-0.14323607427055704,-0.7612732095490716,-0.5251989389920424,-0.9248452696728559,-0.7365163572060124,-0.8010610079575596,-0.8541114058355438,-0.627763041556145,-0.17771883289124668,-0.7161803713527851,-0.44297082228116713,-0.812555260831123,-0.6118479221927497,-0.7427055702917772,-0.7206012378426172,-0.636604774535809],
    [0.0,0.0,0.15502392344497606,-0.12105263157894737,0.26220095693779905,-0.33301435406698565,0.392822966507177,-0.48086124401913877,0.5311004784688995,-0.5421052631578948,0.06842105263157895,-0.5220095693779905,0.015789473684210527,-0.7440191387559809,-0.026794258373205742,-0.884688995215311,-0.06267942583732057,-1.0,-0.049760765550239235,-0.47368421052631576,-0.08421052631578947,-0.5813397129186603,-0.028229665071770334,-0.3837320574162679,0.011483253588516746,-0.29617224880382775,-0.15789473684210525,-0.40239234449760763,-0.1799043062200957,-0.46411483253588515,-0.10191387559808612,-0.2980861244019139,-0.05980861244019139,-0.24019138755980862,-0.26267942583732057,-0.3200956937799043,-0.27799043062200957,-0.3832535885167464,-0.20526315789473684,-0.2669856459330144,-0.16698564593301435,-0.21818181818181817]
]
    
model = tf.keras.models.load_model(model_save_path)

# Variables for plotting
predicted_labels = []
accuracies = []

# Inference test
for data in tesdata:
    predict_result = model.predict(np.array([data]))
    squeezed_result = np.squeeze(predict_result)
    predicted_label = np.argmax(squeezed_result)
    predicted_labels.append(predicted_label)

    accuracy = np.max(squeezed_result)
    accuracy_percent = accuracy * 100
    accuracies.append(accuracy_percent)

print(f'Predicted Labels: {predicted_labels}')

# Plotting results as bar chart
plt.figure(figsize=(10, 6))
plt.bar(range(1, len(tesdata) + 1), accuracies, color='b', label='Accuracy')
plt.xticks(range(1, len(tesdata) + 1), predicted_labels)
plt.title('Prediction Accuracies for Test Data')
plt.xlabel('Predicted Label')
plt.ylabel('Accuracy')
plt.ylim(0, 120)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
